---
name: Build ffdon firmware

on:
  workflow_dispatch:
  push:
    tags:
      - v*
  pull_request:
    paths-ignore:
      - "**.md"
      - "**/CODEOWNERS"
      - ".github/ISSUE_TEMPLATE"
      - ".github/*.yml"
      - "contrib/sign.sh"

jobs:
  build_firmware:
    strategy:
      fail-fast: false
      matrix:
        target: [ "ar71xx-generic", "ar71xx-nand", "ar71xx-tiny", "brcm2708-bcm2708", "brcm2708-bcm2709", "mpc85xx-generic", "ramips-mt7621", "x86-64", "x86-generic", "x86-geode" ]
        domain: [ "01", "03", "05", "07", "09", "11", "13", "15", "17", "19" ]
        gluon:  [ "v2018.2.3" ]

    runs-on: ubuntu-20.04
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo -E ./scripts/install_build_dependencies.sh

      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          # Turn "v2018.2.3_v1.0.08-1-g78bbb5d" into "1.0.08-1-g78bbb5d"
          version=$(git describe --tags | cut -f2 -d"_" | tr -d 'v')

          # Turn "v2018.2.3_v1.0.08-1-g78bbb5d" into "1.0.08"
          branch_version=$(git describe --tags | cut -f2 -d"_" | cut -f1 -d"-" | tr -d 'v')

          mkdir -p builddir/workdir/targets/${{ matrix.target }}

          pushd builddir/workdir/targets/${{ matrix.target }}
          if [ ! -d builddir/workdir/targets/${{ matrix.target }}/gluon ]; then
            git clone --depth 1 --branch ${{ matrix.gluon }} https://github.com/freifunk-gluon/gluon.git gluon
          fi
          popd

          if [ ! -d builddir/workdir/targets/${{ matrix.target }}/gluon/site ]; then
            git clone --depth 1 --branch Domaene-${{ matrix.domain }}_${{ matrix.gluon }}_v${branch_version} https://github.com/ffdon/sites-ffdon.git builddir/workdir/targets/${{ matrix.target }}/gluon/site;
          fi

          pushd builddir/workdir/targets/${{ matrix.target }}/gluon
          make update GLUON_RELEASE=${{ matrix.gluon }}+${version} GLUON_TARGET=${{ matrix.target }} GLUON_BRANCH=stable GLUON_IMAGEDIR=builddir/workdir/output/${{ matrix.domain }}/versions/v${version} -j1 V=99
          make        GLUON_RELEASE=${{ matrix.gluon }}+${version} GLUON_TARGET=${{ matrix.target }} GLUON_BRANCH=stable GLUON_IMAGEDIR=builddir/workdir/output/${{ matrix.domain }}/versions/v${version} -j1 V=99
          popd

          # Print Debug
          find ./builddir/workdir/targets/${{ matrix.target }}/gluon/openwrt/bin/targets/ || true

      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}_Domain${{ matrix.domain }}_output
          path: ./builddir/workdir/targets/${{ matrix.target }}/gluon/openwrt/bin/targets/

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build_firmware
    if: github.event_name != 'pull_request'
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Display structure of artifacts
        run: ls -R
      - name: Create tar.gz files
        run: |
          set -x
          for output in *_output; do
            tar zcvf "${output}.tar.gz" "${output}"
          done
      - name: Create Release & Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          # Note: If there is no release name specified, releases created in
          # the GitHub UI do not trigger a failure and are modified instead.
          draft: false
          prerelease: false
          # Note: Release notes are only auto-generated if the release was
          # created by the Github Action and was not created in the Github UI.
          generate_release_notes: true
          files: |
            ./*_output.tar.gz
